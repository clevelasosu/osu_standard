<?php

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\shortcut\Entity\Shortcut;
use Drupal\user\Entity\Role;
use Drupal\user\Entity\User;

/**
 * Implements hook_install().
 */
function osu_standard_install($is_syncing) {
  // Assign user 1 the "administrator" role.
  /** @var \Drupal\user\Entity\User $user */
  $user = User::load(1);
  $user->roles[] = 'administrator';
  $user->save();

  // Populate the default shortcut set.
  $shortcut = Shortcut::create([
    'shortcut_set' => 'default',
    'title' => t('Add content'),
    'weight' => -20,
    'link' => ['uri' => 'internal:/node/add'],
  ]);
  $shortcut->save();

  $shortcut = Shortcut::create([
    'shortcut_set' => 'default',
    'title' => t('All content'),
    'weight' => -19,
    'link' => ['uri' => 'internal:/admin/content'],
  ]);
  $shortcut->save();
  // Set Page cache to a year.
  $page_cache = \Drupal::configFactory()->getEditable('system.performance');
  $page_cache->set('cache.page.max_age', 31536000);
  $page_cache->save();

}

/**
 * Update exclude node title config for osu_profiles.
 */
function osu_standard_update_9009(&$sandbox) {
  $config = \Drupal::service('config.factory')->getEditable('exclude_node_title.settings');

  $content_types = $config->get('content_types');
  $content_types['osu_profile'] = 'all';
  $config->set('content_types', $content_types);

  $content_modes = $config->get('content_type_modes');
  $content_modes['osu_profile'] = ['full', 'teaser'];
  $config->set('content_type_modes', $content_modes);

  $config->save();
}

/**
 * Add OSU minimum height classes to bootstrap styles alignment setting.
 */
function osu_standard_update_9008(&$sandbox) {
  $min_height_options = "osu-min-h-100|100px\r\nosu-min-h-200|200px\r\nosu-min-h-300|300px\r\nosu-min-h-400|400px\r\nosu-min-h-500|500px\r\nosu-min-h-600|600px\r\nosu-min-h-700|700px\r\nosu-min-h-800|800px";
  $config = \Drupal::service('config.factory')->getEditable('bootstrap_styles.settings');
  $config->set('min_height', $min_height_options);
  $config->save();
}

/**
 * Update Bootstrap Styles for alignment, effects border widths and border
 * style.
 */
function osu_standard_update_9007(&$sandbox) {
  $bootstrap_style_updates = [
    'items_alignment' => "osu-align-items-start|Top\r\nosu-align-items-center|Center\r\nosu-align-items-end|Bottom",
    'border_style' => "bs-border-style-solid|Solid",
    'border_left_style' => "bs-border-style-left-solid|Solid",
    'border_top_style' => "bs-border-style-top-solid|Solid",
    'border_right_style' => "bs-border-style-right-solid|Solid",
    'border_bottom_style' => "bs-border-style-bottom-solid|Solid",
    'border_width' => "osu-border-width-1|Width 1\r\nosu-border-width-2|Width 2\r\nosu-border-width-3|Width 3\r\nosu-border-width-4|Width 4\r\nosu-border-width-5|Width 5",
    'border_left_width' => "osu-border-width-left-1|Width 1\r\nosu-border-width-left-2|Width 2\r\nosu-border-width-left-3|Width 3\r\nosu-border-width-left-4|Width 4\r\nosu-border-width-left-5|Width 5",
    'border_top_width' => "osu-border-width-top-1|Width 1\r\nosu-border-width-top-2|Width 2\r\nosu-border-width-top-3|Width 3\r\nosu-border-width-top-4|Width 4\r\nosu-border-width-top-5|Width 5",
    'border_right_width' => "osu-border-width-right-1|Width 1\r\nosu-border-width-right-2|Width 2\r\nosu-border-width-right-3|Width 3\r\nosu-border-width-right-4|Width 4\r\nosu-border-width-right-5|Width 5",
    'border_bottom_width' => "osu-border-width-bottom-1|Width 1\r\nosu-border-width-bottom-2|Width 2\r\nosu-border-width-bottom-3|Width 3\r\nosu-border-width-bottom-4|Width 4\r\nosu-border-width-bottom-5|Width 5",
    'scroll_effects' => "fade-zoom-in|Fade In\r\nfade-up|Fade Up\r\nfade-down|Fade Down\r\nfade-left|Fade Left\r\nfade-right|Fade Right\r\nfade-up-right|Fade Up Right\r\nfade-up-left|Fade Up Left\r\nfade-down-right|Fade Down Right\r\nfade-down-left|Fade Down Left\r\nzoom-in|Zoom In\r\nzoom-in-up|Zoom In Up\r\nzoom-in-down|Zoom In Down\r\nzoom-in-left|Zoom In Left\r\nzoom-in-right|Zoom In Right\r\nzoom-out|Zoom Out\r\nzoom-out-up|Zoom Out Up\r\nzoom-out-down|Zoom Out Down\r\nzoom-out-right|Zoom Out Right\r\nzoom-out-left|Zoom Out Left",
  ];
  $config = \Drupal::service('config.factory')
    ->getEditable('bootstrap_styles.settings');
  foreach ($bootstrap_style_updates as $bootstrap_style_key => $bootstrap_style_update) {
    $config->set($bootstrap_style_key, $bootstrap_style_update);
  }
  $config->save();
}

/**
 * Update Linkit Profiles
 */
function osu_standard_update_9006(&$sandbox) {
  /** @var \Drupal\Core\Config\Config $config */
  $config = \Drupal::service('config.factory')
    ->getEditable('linkit.linkit_profile.default');
  $linkit_matchers = $config->get('matchers');
  foreach ($linkit_matchers as &$matcher) {
    switch ($matcher["id"]) {
      case 'entity:media':
        $matcher["settings"]["metadata"] = "by [media:uid:entity:account-name] | [media:created:date:medium]";
        $matcher["settings"]["group_by_bundle"] = TRUE;
        $matcher["settings"]["substitution_type"] = "media";
        break;

      case 'entity:node':
        $matcher["settings"]["group_by_bundle"] = TRUE;
        break;
    }
  }
  $config->set('matchers', $linkit_matchers);
  $config->save();
}

/**
 * Delete the Article content type.
 */
function osu_standard_update_9005(&$sandbox) {
  // Get all article nodes and delete.
  $storage_handler = \Drupal::entityTypeManager()->getStorage('node');
  $articles = $storage_handler->loadByProperties(['type' => 'article']);
  try {
    $storage_handler->delete($articles);
  }
  catch (EntityStorageException $entityStorageException) {
    \Drupal::logger('osu_standard')->notice('No nodes found to delete.');
  }
  // Delete the content type article.
  $content_type = \Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->load('article');
  if (!is_null($content_type)) {
    try {
      $content_type->delete();
    }
    catch (EntityStorageException $entityStorageException) {
      \Drupal::logger('osu_standard')
        ->notice('Node type of article not found.');
    }
    return t('Node type Article Removed.');
  }
  return t('Node type Article not found');
}

/**
 * Uninstall fontawesome_menu_icons module.
 */
function osu_standard_update_9004(&$sandbox) {
  \Drupal::service('module_installer')->uninstall(['fontawesome_menu_icons']);
  return t('fontawesome_menu_icons has been uninstalled');
}

/**
 * Re-order text format default.
 */
function osu_standard_update_9003(&$sandbox) {
  $full_html = \Drupal::configFactory();
  $filter_weight = $full_html->getEditable('filter.format.full_html');
  $filter_weight->set('weight', -50);
  $filter_weight->save(TRUE);
}

/**
 * Enable views_conditional module.
 */
function osu_standard_update_9002(&$sandbox) {
  \Drupal::service('module_installer')->install([
    'views_conditional',
  ], TRUE);
  return t('Enabled views_conditional');
}

/**
 * Update permissions for different roles.
 */
function osu_standard_update_9001(&$sandbox) {
  $architect = Role::load('architect');
  $architect->grantPermission('add section library templates');
  $architect->grantPermission('delete section library templates');
  $architect->grantPermission('edit section library templates');
  $architect->grantPermission('export configuration');
  $architect->grantPermission('import configuration');
  $architect->grantPermission('import template from section library');
  $architect->grantPermission('synchronize configuration');
  $architect->grantPermission('view section library templates');
  $architect->save();

  $manage_layout_template = Role::load('manage_layout_templates');
  $manage_layout_template->grantPermission('delete section library templates');
  $manage_layout_template->grantPermission('import template from section library');
  $manage_layout_template->save();

  $manage_site_config = Role::load('manage_site_configuration');
  $manage_site_config->grantPermission('export configuration');
  $manage_site_config->grantPermission('import configuration');
  $manage_site_config->grantPermission('synchronize configuration');
  $manage_site_config->save();
  return t('Update roles for added permissions.');
}


/**
 * Add Dropzone permission to architect role.
 */
function osu_standard_update_8005(&$sandbox) {
  $architect = Role::load('architect');
  $architect->grantPermission('dropzone upload files');
  $architect->save();
  return t('Architect Role can now use Dropzone file uploader');
}

/**
 * Add new roles to existing sites.
 */
function osu_standard_update_8004(&$sandbox) {
  \Drupal::service('module_installer')->install([
    'better_exposed_filters',
    'admin_toolbar_links_access_filter',
    'media_bulk_upload',
    'media_bulk_upload_dropzonejs',
    'webform',
    'webform_access',
    'webform_attachment',
    'webform_bootstrap',
    'webform_node',
    'webform_ui',
    'section_library',
    'views_bulk_edit',
    'views_bulk_operations',
  ], TRUE);
  $roles = Role::loadMultiple();
  $install_profile_path = \Drupal::service('module_handler')
    ->getModule('osu_standard')
    ->getPath();
  $config_path = realpath($install_profile_path . '/config/install');
  $config_storage = \Drupal::service('config.storage');
  $source = new FileStorage($config_path);
  $osu_standard_roles = glob($config_path . '/user.role.*.yml');
  foreach ($osu_standard_roles as $osu_standard_role) {
    $osu_standard_role_name = basename($osu_standard_role, '.yml');
    $role_name = explode('user.role.', $osu_standard_role_name);
    if (!array_key_exists($role_name[1], $roles)) {
      $config_storage->write($osu_standard_role_name, $source->read($osu_standard_role_name));
    }
  }
  // Grant extra permissions to the authenticated role.
  $authenticated_role = Role::load('authenticated');
  $authenticated_role->grantPermission('access toolbar');
  $authenticated_role->grantPermission('access administration pages');
  $authenticated_role->grantPermission('view the administration theme');
  $authenticated_role->setWeight(-9);
  $authenticated_role->save();
  // Update the weight of the anonymous role.
  $anonymous_role = Role::load('anonymous');
  $anonymous_role->setWeight(-10);
  $anonymous_role->save();
  return t('Installed modules, imported missing roles and added permissions to authenticated role.');
}

/**
 * Install and Configure metatag.
 */
function osu_standard_update_8003() {
  \Drupal::service('module_installer')->install([
    'metatag',
    'metatag_google_cse',
    'metatag_open_graph',
    'metatag_twitter_cards',
    'metatag_verification',
    'metatag_views',
  ], TRUE);
  $install_profile_path = \Drupal::service('module_handler')
    ->getModule('osu_standard')
    ->getPath();
  $config_path = realpath($install_profile_path . '/config/install');
  $config_storage = \Drupal::service('config.storage');
  $source = new FileStorage($config_path);
  $metatag_defaults = glob($config_path . '/metatag.metatag_defaults.*.yml');
  foreach ($metatag_defaults as $metatag_default) {
    $metatag_config_name = basename($metatag_default, '.yml');
    $config_storage->write($metatag_config_name, $source->read($metatag_config_name));
  }
  return t('Installed Metatag modules and imported configurations');
}

/**
 * Enable OSU Seckit module.
 */
function osu_standard_update_8002() {
  \Drupal::service('module_installer')->install([
    'seckit',
    'osu_seckit',
  ], TRUE);
  return t('Installed new modules, Seckit and OSU Seckit');
}

/**
 * Update CAS Settings on existing sites.
 */
function osu_standard_update_8001() {
  $config_factory = \Drupal::configFactory();
  $cas_settings = $config_factory->getEditable('cas.settings');
  $cas_server_settings = $cas_settings->get('server');
  $cas_server_settings['path'] = '/idp/profile/cas';
  $cas_settings->set('server', $cas_server_settings);
  $cas_settings->save(TRUE);

  $cas_attributes = $config_factory->getEditable('cas_attributes.settings');
  $cas_attributes_fields = $cas_attributes->get('field');
  $cas_attributes_fields['mappings'] = [
    "name" => "[cas:attribute:givenName] [cas:attribute:surname]",
    "mail" => "[cas:attribute:osuprimarymail]",
  ];
  $cas_attributes->set('field', $cas_attributes_fields);

  $cas_attributes_roles = $cas_attributes->get('role');
  if (count($cas_attributes_roles['mappings']) == 0) {
    $cas_attributes_roles['mappings'] = [
      [
        "rid" => "administrator",
        "attribute" => "entitlement_drupal",
        "value" => "urn:mace:oregonstate.edu:entitlement:drupal-admin",
        "method" => "exact_any",
        "negate" => FALSE,
        "remove_without_match" => TRUE,
      ],
    ];
  }
  $cas_attributes->set('role', $cas_attributes_roles);
  $cas_attributes->save(TRUE);

}
