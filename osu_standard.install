<?php

use Drupal\Core\Config\FileStorage;
use Drupal\shortcut\Entity\Shortcut;
use Drupal\user\Entity\Role;
use Drupal\user\Entity\User;

/**
 * Implements hook_install().
 */
function osu_standard_install($is_syncing) {
  // Assign user 1 the "administrator" role.
  /** @var \Drupal\user\Entity\User $user */
  $user = User::load(1);
  $user->roles[] = 'administrator';
  $user->save();

  // Populate the default shortcut set.
  $shortcut = Shortcut::create([
    'shortcut_set' => 'default',
    'title' => t('Add content'),
    'weight' => -20,
    'link' => ['uri' => 'internal:/node/add'],
  ]);
  $shortcut->save();

  $shortcut = Shortcut::create([
    'shortcut_set' => 'default',
    'title' => t('All content'),
    'weight' => -19,
    'link' => ['uri' => 'internal:/admin/content'],
  ]);
  $shortcut->save();
  // Set Page cache to a year.
  $page_cache = \Drupal::configFactory()->getEditable('system.performance');
  $page_cache->set('cache.page.max_age', 31536000);
  $page_cache->save();

}

/**
 * Enable views_conditional module.
 */
function osu_standard_update_9002(&$sandbox) {
  \Drupal::service('module_installer')->install([
    'views_conditional',
  ], TRUE);
  return t('Enabled views_conditional');
}

/**
 * Update permissions for different roles.
 */
function osu_standard_update_9001(&$sandbox) {
  $architect = Role::load('architect');
  $architect->grantPermission('add section library templates');
  $architect->grantPermission('delete section library templates');
  $architect->grantPermission('edit section library templates');
  $architect->grantPermission('export configuration');
  $architect->grantPermission('import configuration');
  $architect->grantPermission('import template from section library');
  $architect->grantPermission('synchronize configuration');
  $architect->grantPermission('view section library templates');
  $architect->save();

  $manage_layout_template = Role::load('manage_layout_templates');
  $manage_layout_template->grantPermission('delete section library templates');
  $manage_layout_template->grantPermission('import template from section library');
  $manage_layout_template->save();

  $manage_site_config = Role::load('manage_site_configuration');
  $manage_site_config->grantPermission('export configuration');
  $manage_site_config->grantPermission('import configuration');
  $manage_site_config->grantPermission('synchronize configuration');
  $manage_site_config->save();
  return t('Update roles for added permissions.');
}


/**
 * Add Dropzone permission to architect role.
 */
function osu_standard_update_8005(&$sandbox) {
  $architect = Role::load('architect');
  $architect->grantPermission('dropzone upload files');
  $architect->save();
  return t('Architect Role can now use Dropzone file uploader');
}

/**
 * Add new roles to existing sites.
 */
function osu_standard_update_8004(&$sandbox) {
  \Drupal::service('module_installer')->install([
    'better_exposed_filters',
    'admin_toolbar_links_access_filter',
    'media_bulk_upload',
    'media_bulk_upload_dropzonejs',
    'webform',
    'webform_access',
    'webform_attachment',
    'webform_bootstrap',
    'webform_node',
    'webform_ui',
    'section_library',
    'views_bulk_edit',
    'views_bulk_operations',
  ], TRUE);
  $roles = Role::loadMultiple();
  $install_profile_path = \Drupal::service('module_handler')
    ->getModule('osu_standard')
    ->getPath();
  $config_path = realpath($install_profile_path . '/config/install');
  $config_storage = \Drupal::service('config.storage');
  $source = new FileStorage($config_path);
  $osu_standard_roles = glob($config_path . '/user.role.*.yml');
  foreach ($osu_standard_roles as $osu_standard_role) {
    $osu_standard_role_name = basename($osu_standard_role, '.yml');
    $role_name = explode('user.role.', $osu_standard_role_name);
    if (!array_key_exists($role_name[1], $roles)) {
      $config_storage->write($osu_standard_role_name, $source->read($osu_standard_role_name));
    }
  }
  // Grant extra permissions to the authenticated role.
  $authenticated_role = Role::load('authenticated');
  $authenticated_role->grantPermission('access toolbar');
  $authenticated_role->grantPermission('access administration pages');
  $authenticated_role->grantPermission('view the administration theme');
  $authenticated_role->setWeight(-9);
  $authenticated_role->save();
  // Update the weight of the anonymous role.
  $anonymous_role = Role::load('anonymous');
  $anonymous_role->setWeight(-10);
  $anonymous_role->save();
  return t('Installed modules, imported missing roles and added permissions to authenticated role.');
}

/**
 * Install and Configure metatag.
 */
function osu_standard_update_8003() {
  \Drupal::service('module_installer')->install([
    'metatag',
    'metatag_google_cse',
    'metatag_open_graph',
    'metatag_twitter_cards',
    'metatag_verification',
    'metatag_views',
  ], TRUE);
  $install_profile_path = \Drupal::service('module_handler')
    ->getModule('osu_standard')
    ->getPath();
  $config_path = realpath($install_profile_path . '/config/install');
  $config_storage = \Drupal::service('config.storage');
  $source = new FileStorage($config_path);
  $metatag_defaults = glob($config_path . '/metatag.metatag_defaults.*.yml');
  foreach ($metatag_defaults as $metatag_default) {
    $metatag_config_name = basename($metatag_default, '.yml');
    $config_storage->write($metatag_config_name, $source->read($metatag_config_name));
  }
  return t('Installed Metatag modules and imported configurations');
}

/**
 * Enable OSU Seckit module.
 */
function osu_standard_update_8002() {
  \Drupal::service('module_installer')->install([
    'seckit',
    'osu_seckit',
  ], TRUE);
  return t('Installed new modules, Seckit and OSU Seckit');
}

/**
 * Update CAS Settings on existing sites.
 */
function osu_standard_update_8001() {
  $config_factory = \Drupal::configFactory();
  $cas_settings = $config_factory->getEditable('cas.settings');
  $cas_server_settings = $cas_settings->get('server');
  $cas_server_settings['path'] = '/idp/profile/cas';
  $cas_settings->set('server', $cas_server_settings);
  $cas_settings->save(TRUE);

  $cas_attributes = $config_factory->getEditable('cas_attributes.settings');
  $cas_attributes_fields = $cas_attributes->get('field');
  $cas_attributes_fields['mappings'] = [
    "name" => "[cas:attribute:givenName] [cas:attribute:surname]",
    "mail" => "[cas:attribute:osuprimarymail]",
  ];
  $cas_attributes->set('field', $cas_attributes_fields);

  $cas_attributes_roles = $cas_attributes->get('role');
  if (count($cas_attributes_roles['mappings']) == 0) {
    $cas_attributes_roles['mappings'] = [
      [
        "rid" => "administrator",
        "attribute" => "entitlement_drupal",
        "value" => "urn:mace:oregonstate.edu:entitlement:drupal-admin",
        "method" => "exact_any",
        "negate" => FALSE,
        "remove_without_match" => TRUE,
      ],
    ];
  }
  $cas_attributes->set('role', $cas_attributes_roles);
  $cas_attributes->save(TRUE);

}
